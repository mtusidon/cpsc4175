# Joseph Kim - Homework 01
1.	The four concerns of the software crisis are punctual development, meeting the budget, bug-free software, and meeting client needs.
2.	The software life cycle is the entirety of a software’s life; this includes the initial planning and design, production, testing, and maintenance. The software development cycle is the cycle of the actual building of the software, including iterative development.
3.	Perfective maintenance can be demonstrated by Chrome releasing updated versions to use more of the user’s RAM to make loading pages faster or prevent crashing. Adaptive maintenance can be demonstrated by a video game company releasing ports of their game to different platforms after the initial release.
4.	Hardware reaches obsolescence as the software it accommodates requires more and more resources, and software through updates can obtain more features, functionality, or efficiency.
5.	It is more cost-effective to fix bugs before implementation, and most bugs are discovered before software is implemented. Therefore, actively searching for and fixing bugs before implementation is the best approach.
6.	Iterative development is king in software engineering, and adapting those practices will make for a more productive and efficient software engineer.
7.	 Object oriented programming by definition categorizes code into classes with attributes and methods. While it is possible to write structured programs, it is not possible to write good object oriented code without structured programming.
8.	Interaction with the users is more important, because a developer cannot possibly, by themselves break their software in every possible way that a user can.
9.	Learning a new programming language every half a year can discourage sticking to one paradigm in coding and instead expand a developer’s scope.
10.	    The Cathedral and the Bazaar is the story of a former nonbeliever in open source development gaining a new perspective after delving into a similar project himself. His idea that the best software is best developed in a protected and incremental manner is challenged when he witnesses the success of Linux. He also discovers that originality isn’t always rewarded, and it is most efficient to reuse perfectly good code or ideas that are just lying around. I also like his idea that software development is a cooperative effort. By working together and erasing the line between developer and user, the software itself increases in its potential quality. 
